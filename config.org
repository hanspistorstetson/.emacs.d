#+STARTUP: SHOWALL
* Boostrap emacs config
  lets turn to literate programming

  #+BEGIN_SRC emacs-lisp
    (setq org-src-tab-acts-natively t)
    (setq user-full-name "Hans Pistor"
          user-mail-address "hpistor@stetson.edu")

    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)
    (blink-cursor-mode -1)

    (add-to-list 'default-frame-alist '(fullscreen . maximized))


    (line-number-mode +1)
    (global-display-line-numbers-mode 1)
    (column-number-mode t)
    (size-indication-mode t)

    (setq inhibit-startup-screen t)
    (setq frame-title-format '((:eval (if (buffer-file-name)
                                          (abbreviate-file-name (buffer-file-name))
                                        "%b"))))

    (setq scroll-margin 0
          scroll-conservatively 100000
          scroll-preserve-screen-position 1)

    (use-package doom-themes
      :ensure t
      :config
      (load-theme 'doom-one t)
      (doom-themes-visual-bell-config))

    (use-package smart-mode-line-powerline-theme :ensure t)
    (use-package smart-mode-line
      :ensure t
      :config
      (setq sml/theme 'powerline)
      (add-hook 'after-init-hook 'sml/setup))

    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))

    (fset 'yes-or-no-p 'y-or-n-p)

    ;; auto reload file if edited outside of emacs
    (global-auto-revert-mode t)

    (setq-default tab-width 4
                  indent-tabs-mode nil)

    (global-set-key (kbd "C-x k") 'kill-this-buffer)
    (add-hook 'before-save-hook 'whitespace-cleanup)

    (use-package diminish :ensure t)

    (use-package smartparens
      :ensure t
      :diminish smartparens-mode
      :config
      (progn
        (require 'smartparens-config)
        (smartparens-global-mode 1)
        (show-paren-mode t)))

    (use-package which-key
      :ensure t
      :diminish which-key-mode
      :config
      (which-key-mode +1))

    (use-package company
      :ensure t
      :diminish company-mode
      :config
      (add-hook 'after-init-hook #'global-company-mode))

    (use-package flycheck
      :ensure t
      :diminish flycheck-mode
      :config
      (add-hook 'after-init-hook #'global-flycheck-mode))

    (use-package magit
      :bind (("C-M-g" . magit-status)))

    (use-package projectile
      :ensure t
      :diminish projectile-mode
      :bind
      (("C-c p f" . counsel-projectile-find-file)
       ("C-c p p" . counsel-projectile-switch-project)
       ("C-c p s" . projectile-save-project-buffers))
      :config
      (projectile-mode +1))

    (global-set-key (kbd "M-p") 'ace-window)

    (defun hpistor/switch-to-previous-buffer ()
      "Switch to the previous open buffer."
      (interactive)
      (switch-to-buffer (other-buffer (current-buffer) 1)))

    (key-chord-define-global "JJ" #'hpistor/switch-to-previous-buffer)
    (key-chord-mode +1)



    (add-hook 'rust-mode-hook
              (lambda () (setq indent-tabs-mode nil)))
    (add-hook 'rust-mode-hook 'eglot-ensure)
    (add-hook 'rust-mode-hook 'cargo-minor-mode)
    (add-hook 'rust-mode-hook #'flycheck-rust-setup)


    (setq rust-format-on-save t)


    ;; Pressing enter after ({[ works correctly now ]})
    (electric-pair-mode 1)

    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1)

    (global-set-key (kbd "C-s") 'swiper)


    (global-set-key (kbd "C-c I") #'hpistor/find-init-file)
    (defun hpistor/find-init-file()
      "Edit the user's init file."
      (interactive)
      (find-file (expand-file-name "config.org" user-emacs-directory)))



    (use-package evil
      :ensure t
      :init
      (setq evil-want-C-u-scroll t)
      :config
      (evil-mode)
      )

    (use-package evil-magit :ensure t)
    (use-package evil-escape
      :ensure t
      :init
      (evil-escape-mode))
    (use-package rust-mode :ensure t)
    (use-package yaml-mode :ensure t :mode ("\\.yml$" . yaml-mode))

    (defvar jekyll-directory (expand-file-name "~/Documents/blog/src/") "Path to Jekyll Blog.")
    (defvar jekyll-drafts-dir "_drafts/" "Drafts Directory.")
    (defvar jekyll-posts-dir "_posts/" "Posts directory.")
    (defvar jekyll-post-ext ".org" "File extension of posts.")
    (defvar jekyll-post-template "BEGIN_EXPORT\n---\nlayout: post\ntitle: %s\nexcerpt: \ncategories:\n  -  \ntags:\n  -  \n---\n#+END_EXPORT\n\n* " "Default template for posts.")

    (defun jekyll-make-slug (s)
      "Turn S into slug."
      (replace-regexp-in-string
       " " "-" (downcase
                (replace-regexp-in-string
                 "[^A-Za-z0-9 ]" "" s)))
      )

    (defun jekyll-yaml-escape (s)
      "Escape S for YAML."
      (if (or (string-match ":" s)
              (string-match "\"" s))
          (concat "\"" (replace-regexp-in-string "\"" "\\\\\"" s) "\"") s)
      )

    (defun jekyll-draft-post (title)
      "Create new Jekyll blog post with title TITLE."
      (interactive "sPost Title: ")
      (let ((draft-file (concat jekyll-directory jekyll-drafts-dir
                                (jekyll-make-slug title) jekyll-post-ext)))
        (if (file-exists-p draft-file)
            (find-file draft-file)
          (find-file draft-file)
          (insert (format jekyll-post-template (jekyll-yaml-escape title)))
          )
        ))
    (defun jekyll-publish-post ()
      "Move a draft post tothe posts directory & rename it to contain date."
      (interactive)
      (cond
       ((not (equal (file-name-directory (buffer-file-name (current-buffer))) (concat jekyll-directory jekyll-drafts-dir)))
        (message "this is not a draft post."))
       (t
        (let ((filename
               (concat jekyll-directory jekyll-posts-dir
                       (format-time-string "%Y-%m-%d-")
                       (file-name-nondirectory
                        (buffer-file-name (current-buffer)))))
              (old-point (point)))
          (rename-file (buffer-file-name (current-buffer))
                       filename)
          (kill-buffer nil)
          (find-file filename)
          (set-window-point (selected-window) old-point)))))

    (defun org-jekyll-post-link-follow (path) (org-open-file-with-emacs path))
    (defun org-jekyll-post-link-export (path desc format)
      (cond
       ((eq format 'html)
        (format "<a href=\"{%% post_url %s %%}\">%s</a>" path desc)))
      )
    (org-add-link-type "jekyll-post" 'org-jekyll-post-link-follow 'org-jekyll-post-link-export)

    (setq org-publish-project-alist
          '(("org-acaird"
             ;; Path to your org files.
             :base-directory "~/Documents/blog/src"
             :base-extension "org"
             ;; Path to your Jekyll project.
             :publishing-directory "~/Documents/blog/hpistor.github.io/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :with-toc nil
             :headline-levels 4
             :auto-preamble nil
             :auto-sitemapn il
             :html-extension "html"
             :body-only t ;; Only export section between <body> </body> (body-only)
             )
            ("org-static-acaird"
             :base-directory "~/Documents/blog/src/images"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
             :publishing-directory "~/Documents/blog/hpistor.github.io/assets"
             :recursive t
             :publishing-function org-publish-attachment)

            ("blog" :components ("org-acaird" "org-static-acaird"))
            ))
  #+END_SRC


#+BEGIN_SRC python
  def test(x):
      print(x)
#+END_SRC
